// generated by jwg -output model_json.go -transcripttag swagger .; DO NOT EDIT

package favcliptools

import (
	"encoding/json"
)

// UserJSON is jsonized struct for User.
type UserJSON struct {
	ID       UserID `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
	MentorID UserID `json:"mentorID,omitempty"`
}

// UserJSONList is synonym about []*UserJSON.
type UserJSONList []*UserJSON

// UserPropertyEncoder is property encoder for [1]sJSON.
type UserPropertyEncoder func(src *User, dest *UserJSON) error

// UserPropertyDecoder is property decoder for [1]sJSON.
type UserPropertyDecoder func(src *UserJSON, dest *User) error

// UserPropertyInfo stores property information.
type UserPropertyInfo struct {
	name    string
	Encoder UserPropertyEncoder
	Decoder UserPropertyDecoder
}

// UserJSONBuilder convert between User to UserJSON mutually.
type UserJSONBuilder struct {
	_properties map[string]*UserPropertyInfo
	ID          *UserPropertyInfo
	Name        *UserPropertyInfo
	MentorID    *UserPropertyInfo
}

// NewUserJSONBuilder make new UserJSONBuilder.
func NewUserJSONBuilder() *UserJSONBuilder {
	return &UserJSONBuilder{
		_properties: map[string]*UserPropertyInfo{},
		ID: &UserPropertyInfo{
			name: "ID",
			Encoder: func(src *User, dest *UserJSON) error {
				if src == nil {
					return nil
				}
				dest.ID = src.ID
				return nil
			},
			Decoder: func(src *UserJSON, dest *User) error {
				if src == nil {
					return nil
				}
				dest.ID = src.ID
				return nil
			},
		},
		Name: &UserPropertyInfo{
			name: "Name",
			Encoder: func(src *User, dest *UserJSON) error {
				if src == nil {
					return nil
				}
				dest.Name = src.Name
				return nil
			},
			Decoder: func(src *UserJSON, dest *User) error {
				if src == nil {
					return nil
				}
				dest.Name = src.Name
				return nil
			},
		},
		MentorID: &UserPropertyInfo{
			name: "MentorID",
			Encoder: func(src *User, dest *UserJSON) error {
				if src == nil {
					return nil
				}
				dest.MentorID = src.MentorID
				return nil
			},
			Decoder: func(src *UserJSON, dest *User) error {
				if src == nil {
					return nil
				}
				dest.MentorID = src.MentorID
				return nil
			},
		},
	}
}

// AddAll adds all property to UserJSONBuilder.
func (b *UserJSONBuilder) AddAll() *UserJSONBuilder {
	b._properties["ID"] = b.ID
	b._properties["Name"] = b.Name
	b._properties["MentorID"] = b.MentorID
	return b
}

// Add specified property to UserJSONBuilder.
func (b *UserJSONBuilder) Add(info *UserPropertyInfo) *UserJSONBuilder {
	b._properties[info.name] = info
	return b
}

// Remove specified property to UserJSONBuilder.
func (b *UserJSONBuilder) Remove(info *UserPropertyInfo) *UserJSONBuilder {
	delete(b._properties, info.name)
	return b
}

// Convert specified non-JSON object to JSON object.
func (b *UserJSONBuilder) Convert(orig *User) (*UserJSON, error) {
	if orig == nil {
		return nil, nil
	}
	ret := &UserJSON{}

	for _, info := range b._properties {
		if err := info.Encoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// ConvertList specified non-JSON slice to JSONList.
func (b *UserJSONBuilder) ConvertList(orig []*User) (UserJSONList, error) {
	if orig == nil {
		return nil, nil
	}

	list := make(UserJSONList, len(orig))
	for idx, or := range orig {
		json, err := b.Convert(or)
		if err != nil {
			return nil, err
		}
		list[idx] = json
	}

	return list, nil
}

// Convert specified JSON object to non-JSON object.
func (orig *UserJSON) Convert() (*User, error) {
	ret := &User{}

	b := NewUserJSONBuilder().AddAll()
	for _, info := range b._properties {
		if err := info.Decoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// Convert specified JSONList to non-JSON slice.
func (jsonList UserJSONList) Convert() ([]*User, error) {
	orig := ([]*UserJSON)(jsonList)

	list := make([]*User, len(orig))
	for idx, or := range orig {
		obj, err := or.Convert()
		if err != nil {
			return nil, err
		}
		list[idx] = obj
	}

	return list, nil
}

// Marshal non-JSON object to JSON string.
func (b *UserJSONBuilder) Marshal(orig *User) ([]byte, error) {
	ret, err := b.Convert(orig)
	if err != nil {
		return nil, err
	}
	return json.Marshal(ret)
}
