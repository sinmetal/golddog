package proxyserver

// Auto-generated by internal/cmd/genserver/genserver.go. DO NOT EDIT!

import (
	"io"
	"net/http"

	"github.com/lestrrat-go/slack"
	"github.com/lestrrat-go/slack/server"
	"github.com/lestrrat-go/slack/server/mockserver"
)

type Handler struct {
	mock  *mockserver.Handler
	token string
}

func New(token string) *Handler {
	return &Handler{
		mock:  mockserver.New(mockserver.WithToken(token)),
		token: token,
	}
}

func (h *Handler) ProxyHandler(w http.ResponseWriter, r *http.Request) {
	res, err := http.Post(slack.DefaultAPIEndpoint+r.URL.Path[1:], r.Header.Get(`Content-Type`), r.Body)
	if err != nil {
		http.Error(w, http.StatusText(http.StatusBadGateway), http.StatusBadGateway)
		return
	}
	for hdrname, hdrvals := range res.Header {
		for _, hdrval := range hdrvals {
			w.Header().Add(hdrname, hdrval)
		}
	}
	w.WriteHeader(res.StatusCode)
	io.Copy(w, res.Body)
	defer res.Body.Close()
}

func (h *Handler) InstallHandlers(s *server.Server) {
	s.Handle("auth.revoke", http.HandlerFunc(h.mock.HandleAuthRevoke))
	s.Handle("auth.test", http.HandlerFunc(h.ProxyHandler))
	s.Handle("bots.info", http.HandlerFunc(h.ProxyHandler))
	s.Handle("channels.archive", http.HandlerFunc(h.mock.HandleChannelsArchive))
	s.Handle("channels.create", http.HandlerFunc(h.mock.HandleChannelsCreate))
	s.Handle("channels.history", http.HandlerFunc(h.ProxyHandler))
	s.Handle("channels.info", http.HandlerFunc(h.ProxyHandler))
	s.Handle("channels.invite", http.HandlerFunc(h.mock.HandleChannelsInvite))
	s.Handle("channels.join", http.HandlerFunc(h.ProxyHandler))
	s.Handle("channels.kick", http.HandlerFunc(h.mock.HandleChannelsKick))
	s.Handle("channels.leave", http.HandlerFunc(h.ProxyHandler))
	s.Handle("channels.list", http.HandlerFunc(h.ProxyHandler))
	s.Handle("channels.mark", http.HandlerFunc(h.ProxyHandler))
	s.Handle("channels.rename", http.HandlerFunc(h.mock.HandleChannelsRename))
	s.Handle("channels.replies", http.HandlerFunc(h.mock.HandleChannelsReplies))
	s.Handle("channels.setPurpose", http.HandlerFunc(h.mock.HandleChannelsSetPurpose))
	s.Handle("channels.setTopic", http.HandlerFunc(h.mock.HandleChannelsSetTopic))
	s.Handle("channels.unarchive", http.HandlerFunc(h.mock.HandleChannelsUnarchive))
	s.Handle("chat.delete", http.HandlerFunc(h.mock.HandleChatDelete))
	s.Handle("chat.getPermalink", http.HandlerFunc(h.mock.HandleChatGetPermalink))
	s.Handle("chat.meMessage", http.HandlerFunc(h.mock.HandleChatMeMessage))
	s.Handle("chat.postEphemeral", http.HandlerFunc(h.mock.HandleChatPostEphemeral))
	s.Handle("chat.postMessage", http.HandlerFunc(h.mock.HandleChatPostMessage))
	s.Handle("chat.unfurl", http.HandlerFunc(h.mock.HandleChatUnfurl))
	s.Handle("chat.update", http.HandlerFunc(h.mock.HandleChatUpdate))
	s.Handle("dialog.open", http.HandlerFunc(h.mock.HandleDialogOpen))
	s.Handle("emoji.list", http.HandlerFunc(h.ProxyHandler))
	s.Handle("groups.archive", http.HandlerFunc(h.mock.HandleGroupsArchive))
	s.Handle("groups.create", http.HandlerFunc(h.mock.HandleGroupsCreate))
	s.Handle("groups.createChild", http.HandlerFunc(h.mock.HandleGroupsCreateChild))
	s.Handle("groups.history", http.HandlerFunc(h.ProxyHandler))
	s.Handle("groups.info", http.HandlerFunc(h.ProxyHandler))
	s.Handle("groups.invite", http.HandlerFunc(h.mock.HandleGroupsInvite))
	s.Handle("groups.kick", http.HandlerFunc(h.mock.HandleGroupsKick))
	s.Handle("groups.leave", http.HandlerFunc(h.mock.HandleGroupsLeave))
	s.Handle("groups.list", http.HandlerFunc(h.ProxyHandler))
	s.Handle("groups.mark", http.HandlerFunc(h.mock.HandleGroupsMark))
	s.Handle("groups.open", http.HandlerFunc(h.mock.HandleGroupsOpen))
	s.Handle("groups.rename", http.HandlerFunc(h.mock.HandleGroupsRename))
	s.Handle("groups.replies", http.HandlerFunc(h.ProxyHandler))
	s.Handle("groups.setPurpose", http.HandlerFunc(h.mock.HandleGroupsSetPurpose))
	s.Handle("groups.setTopic", http.HandlerFunc(h.mock.HandleGroupsSetTopic))
	s.Handle("groups.unarchive", http.HandlerFunc(h.mock.HandleGroupsUnarchive))
	s.Handle("oauth.access", http.HandlerFunc(h.ProxyHandler))
	s.Handle("reactions.add", http.HandlerFunc(h.mock.HandleReactionsAdd))
	s.Handle("reactions.get", http.HandlerFunc(h.ProxyHandler))
	s.Handle("reactions.list", http.HandlerFunc(h.ProxyHandler))
	s.Handle("reactions.remove", http.HandlerFunc(h.mock.HandleReactionsRemove))
	s.Handle("reminders.add", http.HandlerFunc(h.mock.HandleRemindersAdd))
	s.Handle("reminders.complete", http.HandlerFunc(h.mock.HandleRemindersComplete))
	s.Handle("reminders.delete", http.HandlerFunc(h.mock.HandleRemindersDelete))
	s.Handle("reminders.info", http.HandlerFunc(h.mock.HandleRemindersInfo))
	s.Handle("reminders.list", http.HandlerFunc(h.mock.HandleRemindersList))
	s.Handle("rtm.start", http.HandlerFunc(h.ProxyHandler))
	s.Handle("usergroups.create", http.HandlerFunc(h.mock.HandleUsergroupsCreate))
	s.Handle("usergroups.disable", http.HandlerFunc(h.mock.HandleUsergroupsDisable))
	s.Handle("usergroups.enable", http.HandlerFunc(h.mock.HandleUsergroupsEnable))
	s.Handle("usergroups.list", http.HandlerFunc(h.ProxyHandler))
	s.Handle("usergroups.update", http.HandlerFunc(h.mock.HandleUsergroupsUpdate))
	s.Handle("usergroups.users.list", http.HandlerFunc(h.ProxyHandler))
	s.Handle("usergroups.users.update", http.HandlerFunc(h.mock.HandleUsergroupsUsersUpdate))
	s.Handle("users.deletePhoto", http.HandlerFunc(h.mock.HandleUsersDeletePhoto))
	s.Handle("users.getPresence", http.HandlerFunc(h.mock.HandleUsersGetPresence))
	s.Handle("users.identity", http.HandlerFunc(h.ProxyHandler))
	s.Handle("users.info", http.HandlerFunc(h.ProxyHandler))
	s.Handle("users.list", http.HandlerFunc(h.ProxyHandler))
	s.Handle("users.profile.get", http.HandlerFunc(h.ProxyHandler))
	s.Handle("users.profile.set", http.HandlerFunc(h.mock.HandleUsersProfileSet))
	s.Handle("users.setActive", http.HandlerFunc(h.mock.HandleUsersSetActive))
	s.Handle("users.setPresence", http.HandlerFunc(h.mock.HandleUsersSetPresence))
}
