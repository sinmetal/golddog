package server

// Auto-generated by internal/cmd/genserver/genserver.go. DO NOT EDIT!

import (
	"net/http"
	"strings"
)

func unimplemented(w http.ResponseWriter, r *http.Request) {
	http.Error(w, `method `+r.URL.Path[1:]+` is unimplemented on this server`, http.StatusBadRequest)
}

func New(options ...Option) *Server {
	prefix := "/api"
	for _, option := range options {
		switch option.Name() {
		case optkeyPrefix:
			prefix = option.Value().(string)
		}
	}

	return &Server{
		prefix: prefix,
		handlers: map[string]http.Handler{
			"auth.revoke":             http.HandlerFunc(unimplemented),
			"auth.test":               http.HandlerFunc(unimplemented),
			"bots.info":               http.HandlerFunc(unimplemented),
			"channels.archive":        http.HandlerFunc(unimplemented),
			"channels.create":         http.HandlerFunc(unimplemented),
			"channels.history":        http.HandlerFunc(unimplemented),
			"channels.info":           http.HandlerFunc(unimplemented),
			"channels.invite":         http.HandlerFunc(unimplemented),
			"channels.join":           http.HandlerFunc(unimplemented),
			"channels.kick":           http.HandlerFunc(unimplemented),
			"channels.leave":          http.HandlerFunc(unimplemented),
			"channels.list":           http.HandlerFunc(unimplemented),
			"channels.mark":           http.HandlerFunc(unimplemented),
			"channels.rename":         http.HandlerFunc(unimplemented),
			"channels.replies":        http.HandlerFunc(unimplemented),
			"channels.setPurpose":     http.HandlerFunc(unimplemented),
			"channels.setTopic":       http.HandlerFunc(unimplemented),
			"channels.unarchive":      http.HandlerFunc(unimplemented),
			"chat.delete":             http.HandlerFunc(unimplemented),
			"chat.getPermalink":       http.HandlerFunc(unimplemented),
			"chat.meMessage":          http.HandlerFunc(unimplemented),
			"chat.postEphemeral":      http.HandlerFunc(unimplemented),
			"chat.postMessage":        http.HandlerFunc(unimplemented),
			"chat.unfurl":             http.HandlerFunc(unimplemented),
			"chat.update":             http.HandlerFunc(unimplemented),
			"dialog.open":             http.HandlerFunc(unimplemented),
			"emoji.list":              http.HandlerFunc(unimplemented),
			"groups.archive":          http.HandlerFunc(unimplemented),
			"groups.create":           http.HandlerFunc(unimplemented),
			"groups.createChild":      http.HandlerFunc(unimplemented),
			"groups.history":          http.HandlerFunc(unimplemented),
			"groups.info":             http.HandlerFunc(unimplemented),
			"groups.invite":           http.HandlerFunc(unimplemented),
			"groups.kick":             http.HandlerFunc(unimplemented),
			"groups.leave":            http.HandlerFunc(unimplemented),
			"groups.list":             http.HandlerFunc(unimplemented),
			"groups.mark":             http.HandlerFunc(unimplemented),
			"groups.open":             http.HandlerFunc(unimplemented),
			"groups.rename":           http.HandlerFunc(unimplemented),
			"groups.replies":          http.HandlerFunc(unimplemented),
			"groups.setPurpose":       http.HandlerFunc(unimplemented),
			"groups.setTopic":         http.HandlerFunc(unimplemented),
			"groups.unarchive":        http.HandlerFunc(unimplemented),
			"oauth.access":            http.HandlerFunc(unimplemented),
			"reactions.add":           http.HandlerFunc(unimplemented),
			"reactions.get":           http.HandlerFunc(unimplemented),
			"reactions.list":          http.HandlerFunc(unimplemented),
			"reactions.remove":        http.HandlerFunc(unimplemented),
			"reminders.add":           http.HandlerFunc(unimplemented),
			"reminders.complete":      http.HandlerFunc(unimplemented),
			"reminders.delete":        http.HandlerFunc(unimplemented),
			"reminders.info":          http.HandlerFunc(unimplemented),
			"reminders.list":          http.HandlerFunc(unimplemented),
			"rtm.start":               http.HandlerFunc(unimplemented),
			"usergroups.create":       http.HandlerFunc(unimplemented),
			"usergroups.disable":      http.HandlerFunc(unimplemented),
			"usergroups.enable":       http.HandlerFunc(unimplemented),
			"usergroups.list":         http.HandlerFunc(unimplemented),
			"usergroups.update":       http.HandlerFunc(unimplemented),
			"usergroups.users.list":   http.HandlerFunc(unimplemented),
			"usergroups.users.update": http.HandlerFunc(unimplemented),
			"users.deletePhoto":       http.HandlerFunc(unimplemented),
			"users.getPresence":       http.HandlerFunc(unimplemented),
			"users.identity":          http.HandlerFunc(unimplemented),
			"users.info":              http.HandlerFunc(unimplemented),
			"users.list":              http.HandlerFunc(unimplemented),
			"users.profile.get":       http.HandlerFunc(unimplemented),
			"users.profile.set":       http.HandlerFunc(unimplemented),
			"users.setActive":         http.HandlerFunc(unimplemented),
			"users.setPresence":       http.HandlerFunc(unimplemented),
		},
	}
}

// Handle sets the http.Handler for the given slack method.
func (s *Server) Handle(method string, h http.Handler) {
	s.muHandlers.Lock()
	defer s.muHandlers.Unlock()
	s.handlers[method] = h
}

func (s *Server) GetHandler(method string) (http.Handler, bool) {
	s.muHandlers.RLock()
	defer s.muHandlers.RUnlock()
	h, ok := s.handlers[method]
	return h, ok
}
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	r.URL.Path = strings.TrimPrefix(r.URL.Path, s.prefix)
	h, ok := s.GetHandler(r.URL.Path[1:])
	if !ok {
		http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
		return
	}
	h.ServeHTTP(w, r)
}
